import testing

## Nil

func test_Nil_operator_equ()
    testing.check_equal(nil == nil, true)
    testing.check_equal(nil == 1, false)
end

func test_Nil_operator_cmp()
    testing.check_equal(nil <=> nil, 0)
end

func test_Nil_hash()
    testing.check_equal(nil:hash(), -1)
    testing.check_equal(nil:hash(), -1)
end

func test_Nil_to_string()
    testing.check_equal(nil:to_string(), 'nil')
    testing.check_equal(nil:to_string(), 'nil')
end

## Bool

func test_Bool_operator_equ()
    testing.check_equal(true  == true , true )
    testing.check_equal(false == false, true )
    testing.check_equal(false == true , false)
    testing.check_equal(true  == false, false)
end

func test_Bool_operator_cmp()
    testing.check_equal(true  <=> true , 0)
    testing.check_equal(false <=> false, 0)
    testing.check_equal(false <=> true ,-1)
    testing.check_equal(true  <=> false, 1)
end

func test_Bool_hash()
    testing.check_equal(true:hash() , 1)
    testing.check_equal(false:hash(), 0)
end

func test_Bool_to_string()
    testing.check_equal(true:to_string() , 'true' )
    testing.check_equal(false:to_string(), 'false')
end

## Int

func test_Int_operator_neg()
    testing.check_equal(0, -0)
    testing.check_equal(1, -(-1))
    testing.check_equal(0x100000000000000000000000000000000, -(-0x100000000000000000000000000000000))
end

func test_Int_operator_add_and_sub()
    testing.check_equal(1 + 2, 3)
    testing.check_equal(0x3fffffff + 0x11, 0x40000010)
    testing.check_equal(0x3fffffffffffffff + 0x11, 0x4000000000000010)
    testing.check_equal(0x100000000000000000000000000000000 + 0x1, 0x100000000000000000000000000000001)
    testing.check_equal(0x1 + 0x100000000000000000000000000000000, 0x100000000000000000000000000000001)
    testing.check_equal(0x100000000000000000000000000000000 - 0x1, 0xffffffffffffffffffffffffffffffff)
    testing.check_equal(0x1 - 0x100000000000000000000000000000000, -0xffffffffffffffffffffffffffffffff)
    testing.check_equal(-0xffffffffffffffffffffffffffffffff - 0x1, -0x100000000000000000000000000000000)
    testing.check_equal(0x1 - (-0xffffffffffffffffffffffffffffffff), -0x100000000000000000000000000000000)
    testing.check_equal(-0xffffffffffffffffffffffffffffffff + 0x1, -0xfffffffffffffffffffffffffffffffe)
    testing.check_equal(0x1 + (-0xffffffffffffffffffffffffffffffff), -0xfffffffffffffffffffffffffffffffe)
    testing.check_equal(0x100000000000000000000000000000000 + 0x100000000000000000000000000000000, 0x200000000000000000000000000000000)
    testing.check_equal(0x100000000000000000000000000000000 - 0x100000000000000000000000000000000, 0)
end

func test_Int_operator_mul()
    testing.check_equal(2 * 3, 6)
    testing.check_equal(2 * 3, 6)
    testing.check_equal(0x40000000 * 0x40000000, 0x1000000000000000)
    testing.check_equal(0x4000000000000000 * 0x1000, 0x4000000000000000000)
    testing.check_equal(0x1000 * 0x4000000000000000, 0x4000000000000000000)
    testing.check_equal(0x4000000000000000 * -0x1000, -0x4000000000000000000)
    testing.check_equal(-0x4000000000000000 * 0x1000, -0x4000000000000000000)
    testing.check_equal(-0x4000000000000000 * -0x1000, 0x4000000000000000000)
end

func test_Int_operator_pow()
    testing.check_equal(0 ** 0, 1)
    testing.check_equal(0 ** 1, 0)
    testing.check_equal(1 ** 0, 1)
    testing.check_equal(1 ** 1, 1)
    testing.check_equal(2 ** 0, 1)
    testing.check_equal(2 ** 1, 2)
    testing.check_equal(2 ** 2, 4)
    testing.check_equal(2 ** 3, 8)
    testing.check_equal((-2) ** 0, 1)
    testing.check_equal((-2) ** 1, -2)
    testing.check_equal((-2) ** 2, 4)
    testing.check_equal((-2) ** 3, -8)
    testing.check_equal(16 ** 0.5, 4.0)
    testing.check_equal(16 ** 0.25, 2.0)
    testing.check_equal(2 ** (-2), 0.25)
    testing.check_equal(4 ** (-0.5), 0.5)
    testing.check_equal(31 ** 7, 27512614111)
    testing.check_equal((-31) ** 7, -27512614111)
    testing.check_equal(31 ** 8, 852891037441)
    testing.check_equal((-31) ** 8, 852891037441)
    testing.check_equal(31 ** 13, 24417546297445042591)
    testing.check_equal((-31) ** 13, -24417546297445042591)
    testing.check_equal(31 ** 14, 756943935220796320321)
    testing.check_equal((-31) ** 14, 756943935220796320321)
    testing.check_equal(2 ** 128, 0x100000000000000000000000000000000)
    testing.check_equal((2 ** 64) ** 2, 0x100000000000000000000000000000000)
end

func test_Int_operator_equ()
    testing.check_equal(0 == 0, true)
    testing.check_equal(1 == -1, false)
    testing.check_equal(0x100000000000000000000000000000000 == 0x100000000000000000000000000000000, true)
    testing.check_equal(0x100000000000000000000000000000000 == 0x100000000000000000000000000000001, false)
    testing.check_equal(0x100000000000000000000000000000000 == -0x100000000000000000000000000000000, false)
end

func test_Int_operator_cmp()
    testing.check_equal(1 > -1, true)
    testing.check_equal(0x100000000000000000000000000000001 > 0x100000000000000000000000000000000, true)
    testing.check_equal(0x100000000000000000000000000000000 > -0x10000000000000000000000000000000, true)
    testing.check_equal(-0x100000000000000000000000000000000 > -0x100000000000000000000000000000001, true)
end

func test_Int_to_string()
    testing.check_equal(0:to_string(), '0')
    testing.check_equal((-1):to_string(), '-1')
    testing.check_equal(0x100000000000000000000000000000000:to_string(), '340282366920938463463374607431768211456')
    testing.check_equal((-0x100000000000000000000000000000000):to_string(), '-340282366920938463463374607431768211456')
end

func test_Int_parse()
    testing.check_equal(Int.parse('123'), 123)
    testing.check_equal(Int.parse('-123'), -123)
    testing.check_equal(Int.parse('0x123'), 0x123)
    testing.check_equal(Int.parse('-0x123'), -0x123)
    testing.check_equal(Int.parse('123', 16), 0x123)
    testing.check_equal(Int.parse('-123', 16), -0x123)
end

## Float

func test_Float_operator_neg()
    testing.check_equal(1.1, - -1.1)
    testing.check_equal(-1.1, -1.1)
    testing.check_equal(0.0, - -0.0)
end

func test_Float_operator_add()
    testing.check_equal(0.0 + 0.0, 0.0)
    testing.check_equal(0.0 + 1.0, 1.0)
    testing.check_equal(0.0 + 1  , 1.0)
    testing.check_equal(1.2 + 3.4, 4.6)
    testing.check_equal(-1.2 + 3.4, 2.2)
end

func test_Float_operator_sub()
    testing.check_equal(0.0 - 0.0, 0.0)
    testing.check_equal(1.0 - 0.0, 1.0)
    testing.check_equal(0.0 - 1.0, -1.0)
    testing.check_equal(0.0 - 1  , -1.0)
    testing.check_equal(-1.2 - 3.4, -4.6)
end

func test_Float_operator_mul()
    testing.check_equal(0.0 * 0.0, 0.0)
    testing.check_equal(2.0 * 1.0, 2.0)
    testing.check_equal(2.0 * 1  , 2.0)
    testing.check_equal(-1.5 * 2.5, -3.75)
end

func test_Float_operator_div()
    testing.check_equal((1.0 / 0.0):is_inf(), true)
    testing.check_equal(3.0 / 3.0, 1.0)
    testing.check_equal(3.0 / 2, 1.5)
    testing.check_equal(-3.0 / 2, -1.5)
end

func test_Float_operator_rem()
    testing.check_equal((1.0 % 0.0):is_nan(), true)
    testing.check_equal(3.0 % 2.0, 1.0)
    testing.check_equal(-3.0 % 2.0, -1.0)
end

func test_Float_operator_pow()
    testing.check_equal(1.0 ** 0, 1.0)
    testing.check_equal(2.0 ** 3, 8.0)
    testing.check_equal(4.0 ** 0.5, 2.0)
end

func test_Float_operator_equ()
    testing.check_equal(0.0 == 0.0, true)
    testing.check_equal(0.0 == -0.0, true)
    testing.check_equal(1.0 == 1.0, true)
    testing.check_equal(1.0 == 1, true)
    testing.check_equal(0.0 == false, false)
    testing.check_equal(1.0 == true, false)
end

func test_Float_operator_cmp()
    testing.check_equal(0.0 <=> 0.0, 0)
    testing.check_equal(0.0 <=> 0, 0)
    testing.check_equal(0.0 <=> 1.2, -1)
    testing.check_equal(0.0 <=> -1.2, 1)
end

func test_Float_abs()
    testing.check_equal(1.0:abs(), 1.0)
    testing.check_equal((-1.0):abs(), 1.0)
end

func test_Float_round()
    testing.check_equal(1.2:round(), 1.0)
    testing.check_equal(1.5:round(), 2.0)
    testing.check_equal(2.5:round(), 2.0)
    testing.check_equal(0.035:round(0.01), 0.04)
    testing.check_equal(0.045:round(0.01), 0.04)
end

func test_Float_floor()
    testing.check_equal(1.5:floor(), 1.0)
    testing.check_equal(2.5:floor(), 2.0)
    testing.check_equal(0.035:floor(0.01), 0.03)
end

func test_Float_ceil()
    testing.check_equal(1.5:ceil(), 2.0)
    testing.check_equal(2.5:ceil(), 3.0)
    testing.check_equal(0.035:ceil(0.01), 0.04)
end

## Symbol

func test_Symbol_operator_equ()
    testing.check_equal(Symbol.\'for'("FOO"), Symbol.\'for'("FOO"))
end

## String

func test_String_operator_add()
    testing.check_equal('123' + '456', '123456')
end

func test_String_operator_get_element()
    string = '123'
    testing.check_equal(string[1], 49)
    testing.check_equal(string[2], 50)
    testing.check_equal(string[3], 51)
    testing.check_equal(string[-1], 51)
    testing.check_equal(string[-2], 50)
    testing.check_equal(string[-3], 49)
    string = '\u{7532}\u{4e59}\u{4e19}\u{4e01}'
    testing.check_equal(string[1], 0x7532)
    testing.check_equal(string[2], 0x4e59)
    testing.check_equal(string[3], 0x4e19)
    testing.check_equal(string[4], 0x4e01)
end

## Tuple

func test_Tuple_operator_add()
    testing.check_equal(() + (), ())
    testing.check_equal((1,) + (), (1,))
    testing.check_equal(() + (1,), (1,))
    testing.check_equal((1,2) + (3,4), (1,2,3,4))
end

func test_Tuple_operator_get_element()
    tuple = (2, 4, 6)
    testing.check_equal(tuple[1], 2)
    testing.check_equal(tuple[2], 4)
    testing.check_equal(tuple[3], 6)
    testing.check_equal(tuple[-1], 6)
    testing.check_equal(tuple[-2], 4)
    testing.check_equal(tuple[-3], 2)
end

func test_Tuple_operator_equ()
    testing.check_equal(() == (), true)
    testing.check_equal((1,) == (1,), true)
    testing.check_equal((1, 2, 3) == (1, 2, 3), true)
    testing.check_equal((1, 2, 3) == (1, 2, 4), false)
    testing.check_equal((1, 2, 3) == (3, 2, 1), false)
    testing.check_equal((1, 2, 3) == (1, 2, 3, 4), false)
end

func test_Tuple_operator_cmp()
    testing.check_equal(() <=> (), 0)
    testing.check_equal((1,) <=> (1,), 0)
    testing.check_equal((1, 2, 3) <=> (1, 2, 3), 0)
    testing.check_equal((1, 2, 3) <=> (1, 2, 4), -1)
    testing.check_equal((1, 2, 3) <=> (3, 2, 1), -1)
    testing.check_equal((1, 2, 3) <=> (1,), 1)
end

func test_Tuple_length()
    testing.check_equal(():length(), 0)
    testing.check_equal((1,):length(), 1)
    testing.check_equal((1,2,3):length(), 3)
end

func test_Tuple_hash()
    testing.check_equal(():hash(), ():hash())
    testing.check_equal((1,2,3):hash(), (1,2,3):hash())
end

func test_Tuple_to_string()
    testing.check_equal(():to_string(), "()")
    testing.check_equal((nil,):to_string(), "(nil,)")
    testing.check_equal((true, false):to_string(), "(true, false)")
end

## Array

func test_Array_operator_add()
    testing.check_equal([] + [], [])
    testing.check_equal([1, 2, 3] + [4], [1, 2, 3, 4])
end

func test_Array_operator_get_element()
    array = [1, 3, 5]
    testing.check_equal(array[1], 1)
    testing.check_equal(array[2], 3)
    testing.check_equal(array[3], 5)
    testing.check_equal(array[-1], 5)
    testing.check_equal(array[-2], 3)
    testing.check_equal(array[-3], 1)
end

func test_Array_operator_set_element()
    array = [1, 3, 5]
    array[1] = 11
    array[-1] = 15
    testing.check_equal(array, [11, 3, 15])
end

func test_Array_operator_equ()
    testing.check_equal([] == [], true)
    testing.check_equal([1,2,3] == [1,2,3], true)
    testing.check_equal([1,2,3] == [1,3,2], false)
end

func test_Array_operator_cmp()
    testing.check_equal([] <=> [], 0)
    testing.check_equal([1,2,3] <=> [1,2,3], 0)
    testing.check_equal([1,2,3] <=> [1,3,2], -1)
end

func test_Array_length()
    testing.check_equal([]:length(), 0)
    testing.check_equal([1,2,3]:length(), 3)
end

func test_Array_to_string()
    testing.check_equal([]:to_string(), "[]")
    testing.check_equal([true,false,nil]:to_string(), "[true, false, nil]")
end

func test_Array_append()
    array = []
    array:append(1)
    testing.check_equal(array, [1])
    array:append(2)
    testing.check_equal(array, [1, 2])
    array:append(3)
    testing.check_equal(array, [1, 2, 3])
end

func test_Array_pop()
    array = [3, 2, 1]
    testing.check_equal(array:pop(), 1)
    testing.check_equal(array:pop(), 2)
    testing.check_equal(array:pop(), 3)
    testing.check_equal(array, [])
end

func test_Array_insert()
    array = []
    array:insert(1, 1)
    testing.check_equal(array, [1])
    array:insert(1, 2)
    testing.check_equal(array, [2, 1])
    array:insert(-1, 3)
    testing.check_equal(array, [2, 1, 3])
    array:insert(2, 4)
    testing.check_equal(array, [2, 4, 1, 3])
    array:insert(-2, 5)
    testing.check_equal(array, [2, 4, 1, 5, 3])
end

func test_Array_remove()
    array = [3, 2, 1]
    array:remove(1)
    testing.check_equal(array, [2, 1])
    array:remove(-1)
    testing.check_equal(array, [2])
end

## Map

func test_Map_operator_equ()
    testing.check_equal({} == {}, true)
    testing.check_equal({true->false,false->true} == {true->false,false->true}, true)
    testing.check_equal({true->false,false->true} == {true->false,false->nil}, false)
    testing.check_equal({true->false,false->true} == {true->false}, false)
end

func test_Map_operator_or()
    testing.check_equal({true->false} | {false->true}, {true->false,false->true})
    testing.check_equal({true->false,false->true} | {false->true}, {true->false,false->true})
end

func test_Map_operator_get_element()
    map = {true->false,false->true,nil->nil}
    testing.check_equal(map[nil], nil)
    testing.check_equal(map[true], false)
    testing.check_equal(map[false], true)
end

func test_Map_operator_set_element()
    map = {}
    map[nil] = nil
    map[true] = false
    map[false] = true
    testing.check_equal(map, {true->false,false->true,nil->nil})
    map[true] = true
    map[false] = false
    testing.check_equal(map, {true->true,false->false,nil->nil})
end

func test_Map_length()
    testing.check_equal({}:length(), 0)
    testing.check_equal({true->true,false->false,nil->nil}:length(), 3)
end

func test_Map_get()
    map = {true->false,false->true}
    testing.check_equal(map:get(true), false)
    testing.check_equal(map:get(nil), nil)
    testing.check_equal(map:get(nil, false), false)
end

func test_Map_contains()
    map = {true->false,false->true}
    testing.check_equal(map:contains(nil), false)
    testing.check_equal(map:contains(true), true)
end

func test_Map_remove()
    map = {true->false,false->true}
    testing.check_equal(map:remove(nil), false)
    testing.check_equal(map:remove(true), true)
    testing.check_equal(map, {false->true})
end

func test_Map_clear()
    map = {true->false,false->true}
    map:clear()
    testing.check_equal(map:length(), 0)
end

## Type

func test_Type_operator_equ()
    testing.check_equal(Int == Int, true)
    testing.check_equal(Int == Float, false)
end

func test_Type_of()
    testing.check_equal(Type.of(1), Int)
    testing.check_equal(Type.of(1.0), Float)
end
